const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const cron = require('node-cron');
const fs = require('fs');
// –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_TELEGRAM_BOT_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
const token = '1808958052:AAHAwyrqb7y5_sM2jvQP1ypJ-t3r6qWNAm4';

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id)
const ADMIN_CHAT_ID = 653104212; // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à chat_id –∑–¥–µ—Å—å

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
const db = new sqlite3.Database('./weather_bot.db');

// –û–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS subscriptions (
        chat_id INTEGER PRIMARY KEY,
        city TEXT,
        time TEXT,
        timezone TEXT,
        subscription_start DATE DEFAULT (date('now')),
        language TEXT DEFAULT (text('en'))
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS user_stats (
        chat_id INTEGER PRIMARY KEY,
        total_requests INTEGER DEFAULT 0,
        weather_requests INTEGER DEFAULT 0,
        city_changes INTEGER DEFAULT 0,
        time_changes INTEGER DEFAULT 0
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS weather_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        city TEXT,
        temperature REAL,
        humidity INTEGER,
        description TEXT,
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )`);
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã
const languages = {
    en: JSON.parse(fs.readFileSync('./locales/en.json', 'utf8')),
    ru: JSON.parse(fs.readFileSync('./locales/ru.json', 'utf8'))
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
function getLocaleText(chatId, key) {
    return new Promise((resolve, reject) => {
        db.get("SELECT language FROM subscriptions WHERE chat_id = ?", [chatId], (err, row) => {
            if (err) {
                return reject(err);
            }
            const language = row?.language || 'en'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
            resolve(languages[language][key]);
        });
    });
}

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ–Ω—é
const lastMenuMessageId = {};

// Inline keyboard markup –¥–ª—è –º–µ–Ω—é
const mainMenuKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [{ text: 'üìå –ü–æ–¥–ø–∏—Å–∫–∞', callback_data: 'subscription_menu' }],
            [{ text: 'üå§Ô∏è –î–µ–π—Å—Ç–≤–∏—è', callback_data: 'actions_menu' }]
        ]
    }
};

const subscriptionMenuKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [{ text: 'üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'subscribe' }],
            [{ text: '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data: 'change_city' }],
            [{ text: '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data: 'change_time' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'unsubscribe' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }]
        ]
    }
};

const actionsMenuKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [{ text: 'üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞', callback_data: 'current_weather' }],
            [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }],
            [{ text: 'üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data: 'feedback' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }]
        ]
    }
};

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
async function sendMenu(chatId, keyboard = mainMenuKeyboard) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π message_id –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (lastMenuMessageId[chatId]) {
        try {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.deleteMessage(chatId, lastMenuMessageId[chatId]);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${lastMenuMessageId[chatId]}:`, error.message);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    const sentMessage = await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    lastMenuMessageId[chatId] = sentMessage.message_id;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ API OpenWeatherMap
async function getWeatherByCity(city) {
    const apiKey = "3cea34b26dd41310d93283c98b8d2903"; // –í–∞—à API-–∫–ª—é—á –¥–ª—è OpenWeatherMap
    try {
        const response = await axios.get(
            `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=ru&appid=${apiKey}`
        );
        return response.data;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city}:`, error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
function sendWeatherAtScheduledTimes() {
    const now = new Date();
    const currentHour = String(now.getHours()).padStart(2, '0');
    const currentMinute = String(now.getMinutes()).padStart(2, '0');
    const currentTime = `${currentHour}:${currentMinute}`;
    db.each("SELECT * FROM subscriptions", async (err, row) => {
        if (err) {
            return console.error(err.message);
        }
        if (row.time === currentTime) {
            const weatherData = await getWeatherByCity(row.city);
            if (weatherData) {
                const message = formatWeatherMessage(weatherData, row.city);
                bot.sendMessage(row.chat_id, message);

                // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                db.run(
                    "INSERT INTO weather_history (chat_id, city, temperature, humidity, description) VALUES (?, ?, ?, ?, ?)",
                    [row.chat_id, row.city, weatherData.main.temp, weatherData.main.humidity, weatherData.weather[0].description]
                );
            } else {
                bot.sendMessage(row.chat_id, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${row.city}.`);
            }
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ
function formatWeatherMessage(weatherData, city) {
    const temperature = weatherData.main.temp; // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    const feelsLike = weatherData.main.feels_like; // –û—â—É—â–∞–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    const humidity = weatherData.main.humidity; // –í–ª–∞–∂–Ω–æ—Å—Ç—å
    const pressure = weatherData.main.pressure; // –î–∞–≤–ª–µ–Ω–∏–µ
    const windSpeed = weatherData.wind.speed; // –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞
    const clouds = weatherData.clouds.all; // –û–±–ª–∞—á–Ω–æ—Å—Ç—å
    const visibility = weatherData.visibility / 1000; // –í–∏–¥–∏–º–æ—Å—Ç—å (–≤ –∫–º)
    const sunrise = new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString(); // –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞
    const sunset = new Date(weatherData.sys.sunset * 1000).toLocaleTimeString(); // –ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞
    const rain = weatherData.rain ? weatherData.rain['1h'] : 0; // –û—Å–∞–¥–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å (–¥–æ–∂–¥—å)
    const snow = weatherData.snow ? weatherData.snow['1h'] : 0; // –û—Å–∞–¥–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å (—Å–Ω–µ–≥)
    const description = weatherData.weather[0].description; // –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    return `‚òÅÔ∏è **–ü–æ–≥–æ–¥–∞ –≤ ${city}:**\n` +
        `üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature.toFixed(1)}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${feelsLike.toFixed(1)}¬∞C)\n` +
        `üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${humidity}%\n` +
        `üìä –î–∞–≤–ª–µ–Ω–∏–µ: ${pressure} –≥–ü–∞\n` +
        `üí® –í–µ—Ç–µ—Ä: ${windSpeed} –º/—Å\n` +
        `‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${clouds}%\n` +
        `üëÄ –í–∏–¥–∏–º–æ—Å—Ç—å: ${visibility.toFixed(1)} –∫–º\n` +
        `üåÖ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: ${sunrise}\n` +
        `üåá –ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: ${sunset}\n` +
        `üåßÔ∏è –û—Å–∞–¥–∫–∏ (–¥–æ–∂–¥—å): ${rain.toFixed(1)} –º–º\n` +
        `‚ùÑÔ∏è –û—Å–∞–¥–∫–∏ (—Å–Ω–µ–≥): ${snow.toFixed(1)} –º–º\n` +
        `üå§Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ: ${description}`;
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
cron.schedule('* * * * *', () => {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã...');
    sendWeatherAtScheduledTimes();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.chat.first_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º
    db.get("SELECT * FROM subscriptions WHERE chat_id = ?", [chatId], (err, row) => {
        if (err) {
            return console.error(err.message);
        }
        if (!row) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            bot.sendMessage(ADMIN_CHAT_ID, `üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞:\nID: ${chatId}\n–ò–º—è: ${firstName}`);
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.run("INSERT OR IGNORE INTO user_stats (chat_id) VALUES (?)", [chatId]);

    sendMenu(chatId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
bot.onText(/\/users/, (msg) => {
    const chatId = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (chatId !== ADMIN_CHAT_ID) {
        bot.sendMessage(chatId, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.all("SELECT * FROM subscriptions", async (err, rows) => {
        if (err) {
            return console.error(err.message);
        }
        if (rows.length === 0) {
            bot.sendMessage(chatId, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
            return;
        }

        let message = "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n";
        for (const row of rows) {
            try {
                const user = await bot.getChat(row.chat_id);
                const username = user.username ? `@${user.username}` : user.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
                const city = row.city || "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
                const time = row.time || "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ";
                message += `\n‚Ä¢ ${username} / ${user.id}\n–ì–æ—Ä–æ–¥: ${city}\n–í—Ä–µ–º—è: ${time}\n`;
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${row.chat_id}:`, error.message);
                message += `\n‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${row.chat_id} (–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)\n`;
            }
        }
        bot.sendMessage(chatId, message);
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
bot.onText(/\/broadcast/, (msg) => {
    const chatId = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (chatId !== ADMIN_CHAT_ID) {
        bot.sendMessage(chatId, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
        return;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:");
    bot.once('message', (msgText) => {
        const broadcastMessage = msgText.text;

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db.all("SELECT chat_id FROM subscriptions", (err, rows) => {
            if (err) {
                console.error(err.message);
                bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
                return;
            }
            if (rows.length === 0) {
                bot.sendMessage(chatId, "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
                return;
            }

            let successCount = 0;
            let errorCount = 0;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            rows.forEach((row) => {
                const userChatId = row.chat_id;
                bot.sendMessage(userChatId, broadcastMessage)
                    .then(() => {
                        successCount++;
                    })
                    .catch((error) => {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userChatId}:`, error.message);
                        errorCount++;
                    })
                    .finally(() => {
                        // –ï—Å–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                        if (successCount + errorCount === rows.length) {
                            bot.sendMessage(
                                chatId,
                                `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n–û—à–∏–±–æ–∫: ${errorCount}`
                            );
                        }
                    });
            });
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sendmessage (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
bot.onText(/\/sendmessage/, (msg) => {
    const chatId = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (chatId !== ADMIN_CHAT_ID) {
        bot.sendMessage(chatId, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.all("SELECT chat_id FROM subscriptions", async (err, rows) => {
        if (err) {
            return console.error(err.message);
        }
        if (rows.length === 0) {
            bot.sendMessage(chatId, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
            return;
        }

        let message = "üë• –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n";
        for (const row of rows) {
            try {
                const user = await bot.getChat(row.chat_id);
                const username = user.username ? `@${user.username}` : "–ù–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞";
                message += `‚Ä¢ chat_id: ${row.chat_id}, –ù–∏–∫–Ω–µ–π–º: ${username}\n`;
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chat_id ${row.chat_id}:`, error.message);
                message += `‚Ä¢ chat_id: ${row.chat_id}, –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n`;
            }
        }

        bot.sendMessage(chatId, message);

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:");
        bot.once('message', (msgChatId) => {
            const targetChatId = msgChatId.text;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ chat_id —á–∏—Å–ª–æ–º
            if (!/^\d+$/.test(targetChatId)) {
                bot.sendMessage(chatId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                return;
            }

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:");
            bot.once('message', (msgText) => {
                const messageText = msgText.text;

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.sendMessage(targetChatId, messageText)
                    .then(() => {
                        bot.sendMessage(chatId, `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id ${targetChatId}.`);
                    })
                    .catch((error) => {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id ${targetChatId}:`, error.message);
                        bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id ${targetChatId}.`);
                    });
            });
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const action = query.data;

    if (action === 'subscription_menu') {
        // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–º–µ–Ω—é "–ü–æ–¥–ø–∏—Å–∫–∞"
        await sendMenu(chatId, subscriptionMenuKeyboard);
    } else if (action === 'actions_menu') {
        // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–º–µ–Ω—é "–î–µ–π—Å—Ç–≤–∏—è"
        await sendMenu(chatId, actionsMenuKeyboard);
    } else if (action === 'back_to_main_menu') {
        // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await sendMenu(chatId, mainMenuKeyboard);
    } else if (action === 'subscribe') {
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:");
        userStates[chatId] = 'waiting_for_city_subscribe';
    } else if (action === 'change_city') {
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:");
        userStates[chatId] = 'waiting_for_city';
    } else if (action === 'change_time') {
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):\n–í–ê–ñ–ù–û: –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–∞–π–º–∑–æ–Ω–µ UTC+3");
        userStates[chatId] = 'waiting_for_time';
    } else if (action === 'unsubscribe') {
        // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.run("DELETE FROM subscriptions WHERE chat_id = ?", [chatId], function (err) {
            if (err) {
                return console.error(err.message);
            }
            if (this.changes > 0) {
                bot.sendMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã.");
            } else {
                bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.");
            }
            sendMenu(chatId, mainMenuKeyboard);
        });
    } else if (action === 'current_weather') {
        // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.get("SELECT city FROM subscriptions WHERE chat_id = ?", [chatId], async (err, row) => {
            if (err) {
                return console.error(err.message);
            }
            if (!row || !row.city) {
                bot.sendMessage(chatId, "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥.");
                sendMenu(chatId, mainMenuKeyboard);
                return;
            }
            const city = row.city;
            const weatherData = await getWeatherByCity(city);
            if (weatherData) {
                const message = formatWeatherMessage(weatherData, city);
                bot.sendMessage(chatId, message);
            } else {
                bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city}.`);
            }
            sendMenu(chatId, mainMenuKeyboard);
        });
    } else if (action === 'stats') {
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        db.get("SELECT * FROM subscriptions WHERE chat_id = ?", [chatId], (err, subscriptionRow) => {
            if (err) {
                return console.error(err.message);
            }

            db.get("SELECT * FROM user_stats WHERE chat_id = ?", [chatId], (err, statsRow) => {
                if (err) {
                    return console.error(err.message);
                }

                db.all("SELECT * FROM weather_history WHERE chat_id = ? AND date >= date('now', '-30 days')", [chatId], (err, weatherRows) => {
                    if (err) {
                        return console.error(err.message);
                    }

                    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–≥–æ–¥–µ
                    const temperatures = weatherRows.map(row => row.temperature);
                    const avgTemperature = temperatures.reduce((sum, temp) => sum + temp, 0) / temperatures.length || 0;
                    const maxTemperature = Math.max(...temperatures) || 0;
                    const minTemperature = Math.min(...temperatures) || 0;
                    const rainyDays = weatherRows.filter(row => row.description.toLowerCase().includes('rain')).length;
                    const sunnyDays = weatherRows.filter(row => row.description.toLowerCase().includes('clear')).length;

                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                    let message = "";

                    if (subscriptionRow) {
                        const subscriptionStartDate = new Date(subscriptionRow.subscription_start); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç Date
                        const now = new Date();
                        const weeksActive = Math.floor((now - subscriptionStartDate) / (1000 * 60 * 60 * 24 * 7));
                    
                        message += `üìä –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å: ${subscriptionStartDate.toLocaleDateString()} (${weeksActive} –Ω–µ–¥–µ–ª–∏)\n`;
                    }

                    if (statsRow) {
                        message += `\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n` +
                            `–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${statsRow.total_requests}\n` +
                            `–ó–∞–ø—Ä–æ—Å–æ–≤ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã: ${statsRow.weather_requests}\n` +
                            `–ò–∑–º–µ–Ω–µ–Ω–∏–π –≥–æ—Ä–æ–¥–∞: ${statsRow.city_changes}\n` +
                            `–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏: ${statsRow.time_changes}\n`;
                    }

                    if (weatherRows.length > 0) {
                        message += `\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≥–æ–¥—ã –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ:\n` +
                            `–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –º–µ—Å—è—Ü: ${avgTemperature.toFixed(1)}¬∞C\n` +
                            `–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${maxTemperature.toFixed(1)}¬∞C\n` +
                            `–°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${minTemperature.toFixed(1)}¬∞C\n` +
                            `–î–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π: ${rainyDays}\n` +
                            `–°–æ–ª–Ω–µ—á–Ω—ã—Ö –¥–Ω–µ–π: ${sunnyDays}\n`;
                    } else {
                        message += `\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≥–æ–¥—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö.`;
                    }

                    bot.sendMessage(chatId, message);
                });
            });
        });
    } else if (action === 'feedback') {
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:");
        userStates[chatId] = 'waiting_for_feedback';
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    db.run("INSERT OR IGNORE INTO user_stats (chat_id) VALUES (?)", [chatId]);
    db.run("UPDATE user_stats SET total_requests = total_requests + 1 WHERE chat_id = ?", [chatId]);

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "/")
    if (text.startsWith('/')) {
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userStates[chatId] === 'waiting_for_city_subscribe') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –≥–æ—Ä–æ–¥
        const city = text;
        const weatherData = await getWeatherByCity(city);
        if (!weatherData) {
            bot.sendMessage(chatId, `–ì–æ—Ä–æ–¥ "${city}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
            delete userStates[chatId]; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return;
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        userStates[chatId] = { step: 'waiting_for_time_subscribe', city };
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):\n–í–ê–ñ–ù–û: –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–∞–π–º–∑–æ–Ω–µ UTC+3");
    } else if (userStates[chatId]?.step === 'waiting_for_time_subscribe') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è
        const time = text;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (HH:MM)
        const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/;
        if (!timeRegex.test(time)) {
            bot.sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.");
            return;
        }
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const city = userStates[chatId].city;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        db.run(
            "INSERT INTO subscriptions (chat_id, city, time) VALUES (?, ?, ?) ON CONFLICT(chat_id) DO UPDATE SET city = excluded.city, time = excluded.time",
            [chatId, city, time],
            function (err) {
                if (err) {
                    return console.error(err.message);
                }
                bot.sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã –¥–ª—è ${city} –≤ ${time}.`);
                delete userStates[chatId]; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                sendMenu(chatId, mainMenuKeyboard);
            }
        );
    } else if (userStates[chatId] === 'waiting_for_city') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
        const city = text;
        const weatherData = await getWeatherByCity(city);
        if (!weatherData) {
            bot.sendMessage(chatId, `–ì–æ—Ä–æ–¥ "${city}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
            delete userStates[chatId]; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return;
        }
        db.run("UPDATE subscriptions SET city = ? WHERE chat_id = ?", [city, chatId], function (err) {
            if (err) {
                return console.error(err.message);
            }
            bot.sendMessage(chatId, `–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${city}.`);
            db.run("UPDATE user_stats SET city_changes = city_changes + 1 WHERE chat_id = ?", [chatId]);
            delete userStates[chatId]; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            sendMenu(chatId, mainMenuKeyboard);
        });
    } else if (userStates[chatId] === 'waiting_for_time') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è
        const time = text;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (HH:MM)
        const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/;
        if (!timeRegex.test(time)) {
            bot.sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.");
            return;
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.run("UPDATE subscriptions SET time = ? WHERE chat_id = ?", [time, chatId], function (err) {
            if (err) {
                return console.error(err.message);
            }
            bot.sendMessage(chatId, `–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${time}.`);
            db.run("UPDATE user_stats SET time_changes = time_changes + 1 WHERE chat_id = ?", [chatId]);
            delete userStates[chatId]; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            sendMenu(chatId, mainMenuKeyboard);
        });
    } else if (userStates[chatId] === 'waiting_for_feedback') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
        const feedback = text;
        bot.sendMessage(ADMIN_CHAT_ID, `üîî –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}:\n${feedback}`);
        bot.sendMessage(chatId, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ!");
        delete userStates[chatId]; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        sendMenu(chatId, mainMenuKeyboard);
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
        bot.sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.");
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /adminstats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
bot.onText(/\/adminstats/, (msg) => {
    const chatId = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (chatId !== ADMIN_CHAT_ID) {
        bot.sendMessage(chatId, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    db.all("SELECT city, COUNT(*) AS count FROM subscriptions GROUP BY city ORDER BY count DESC", (err, rows) => {
        if (err) {
            return console.error(err.message);
        }

        let message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n";
        db.get("SELECT COUNT(*) AS active_users FROM subscriptions", (err, activeUsersRow) => {
            if (err) {
                return console.error(err.message);
            }
            message += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${activeUsersRow.active_users}\n`;

            db.get("SELECT COUNT(*) AS new_users FROM subscriptions WHERE subscription_start >= date('now', '-7 days')", (err, newUsersRow) => {
                if (err) {
                    return console.error(err.message);
                }
                message += `–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: ${newUsersRow.new_users}\n`;

                message += "\n–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n";
                if (rows.length > 0) {
                    rows.forEach(row => {
                        message += `‚Ä¢ ${row.city}: ${row.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`;
                    });
                } else {
                    message += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö.\n";
                }

                db.get("SELECT SUM(total_requests) AS total_requests FROM user_stats", (err, requestsRow) => {
                    if (err) {
                        return console.error(err.message);
                    }
                    message += `\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: ${requestsRow.total_requests}`;

                    bot.sendMessage(chatId, message);
                });
            });
        });
    });
});

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");