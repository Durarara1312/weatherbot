const database = require('../database');
const localization = require('../utils/localization');
const logger = require('../utils/logger');
const config = require('../config');

module.exports = {
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
     * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
     * @param {number} chatId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
     */
    async handleFeedbackAction(bot, chatId) {
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
            database.setState(chatId, 'waiting_for_feedback', (err) => {
                if (err) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è chatId ${chatId}:`, err.message);
                } else {
                    console.log(`[DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_feedback –¥–ª—è chatId ${chatId}`);
                }
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤
            const feedbackPrompt = await localization.getLocaleText(chatId, 'feedback_prompt');
            bot.sendMessage(chatId, feedbackPrompt);
        } catch (error) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤", error);
            bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    },

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–∑—ã–≤–∞
     * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
     * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async handleFeedbackMessage(bot, msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const username = msg.from.username || '–ù–µ —É–∫–∞–∑–∞–Ω';
        const feedbackText = msg.text;

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.getState(chatId, async (err, row) => {
            if (err) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è chatId ${chatId}:`, err.message);
                return;
            }

            const currentState = row?.state;

            console.log(`[DEBUG] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è chatId ${chatId}: ${currentState}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (currentState === 'waiting_for_feedback') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –Ω–µ –ø—É—Å—Ç–æ–π
                if (!feedbackText.trim()) {
                    const invalidFeedbackError = await localization.getLocaleText(chatId, 'invalid_feedback_error');
                    bot.sendMessage(chatId, invalidFeedbackError);
                    return;
                }

                try {
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
                    logger.info(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${userId}): ${feedbackText}`);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    const feedbackConfirmation = await localization.getLocaleText(chatId, 'feedback_success');
                    bot.sendMessage(chatId, feedbackConfirmation);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    const adminMessage = `
                        üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
                        üë§ Username: ${username}
                        üî¢ User ID: ${userId}
                        üí¨ –û—Ç–∑—ã–≤: ${feedbackText}
                    `;
                    bot.sendMessage(config.ADMIN_CHAT_ID, adminMessage);

                    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    database.clearState(chatId, (err) => {
                        if (err) {
                            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è chatId ${chatId}:`, err.message);
                        } else {
                            console.log(`[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è chatId ${chatId}`);
                        }
                    });
                } catch (error) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞", error);
                    bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                }
            }
        });
    }
};