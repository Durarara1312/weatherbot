const userStates = {}; // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
const localization = require('../utils/localization');
const logger = require('../utils/logger');
const config = require('../config');

module.exports = {
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
     * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
     * @param {number} chatId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
     */
    async handleFeedbackAction(bot, chatId) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
        userStates[chatId] = 'waiting_for_feedback';

        try {
            const feedbackPrompt = await localization.getLocaleText(chatId, 'feedback_prompt');
            bot.sendMessage(chatId, feedbackPrompt);
        } catch (error) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤", error);
            bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    },

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–∑—ã–≤–∞
     * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
     * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async handleFeedbackMessage(bot, msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const username = msg.from.username || '–ù–µ —É–∫–∞–∑–∞–Ω';
        const feedbackText = msg.text;

        if (userStates[chatId] === 'waiting_for_feedback') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –Ω–µ –ø—É—Å—Ç–æ–π
            if (!feedbackText.trim()) {
                const invalidFeedbackError = await localization.getLocaleText(chatId, 'invalid_feedback_error');
                bot.sendMessage(chatId, invalidFeedbackError);
                return;
            }

            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
            logger.info(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${userId}): ${feedbackText}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try {
                const feedbackConfirmation = await localization.getLocaleText(chatId, 'feedback_success');
                bot.sendMessage(chatId, feedbackConfirmation);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                const adminMessage = `
                    üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
                    üë§ Username: ${username}
                    üî¢ User ID: ${userId}
                    üí¨ –û—Ç–∑—ã–≤: ${feedbackText}
                `;
                bot.sendMessage(config.ADMIN_CHAT_ID, adminMessage);

                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                delete userStates[chatId];
            } catch (error) {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞", error);
                bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        }
    }
};