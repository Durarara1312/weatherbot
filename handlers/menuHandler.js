const TelegramBot = require('node-telegram-bot-api');
const database = require('../database');
const localization = require('../utils/localization');
const cityHandler = require('./cityHandler');
const logger = require('../utils/logger');
const models = require('../models');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const lastMenuMessageId = {};

module.exports = {
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
     * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async sendMainMenu(bot, chatId) {
        const keyboard = await this.getMainMenuKeyboard(chatId);
        this.sendMenu(bot, chatId, keyboard, 'main_menu_message');
    },

    /**
     * –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
     * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object} - Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     */
    async getMainMenuKeyboard(chatId) {
        const subscribeButton = await localization.getLocaleText(chatId, 'subscribe_button');
        const actionsButton = await localization.getLocaleText(chatId, 'actions_menu');
        const changeLanguageButton = await localization.getLocaleText(chatId, 'change_language_button');

        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: subscribeButton, callback_data: 'subscription_menu' }],
                    [{ text: actionsButton, callback_data: 'actions_menu' }],
                    [{ text: changeLanguageButton, callback_data: 'change_language' }]
                ]
            }
        };
    },

   /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
     * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
     * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
   async sendSubscriptionMenu(bot, chatId) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    database.getSubscription(chatId, async (err, subscription) => {
        if (err) {
            console.error(err.message);
            bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏.");
            return;
        }

        const statusText = subscription?.status === 'active'
            ? await localization.getLocaleText(chatId, 'subscription_status_active')
            : await localization.getLocaleText(chatId, 'subscription_status_inactive');

        const cityText = subscription?.city
            ? await localization.getLocaleText(chatId, 'city_set', { city: subscription.city })
            : await localization.getLocaleText(chatId, 'city_not_set');

        const timeText = subscription?.time
            ? await localization.getLocaleText(chatId, 'time_set', { time: subscription.time })
            : await localization.getLocaleText(chatId, 'time_not_set');

        const subscriptionMenuMessage = `
${await localization.getLocaleText(chatId, 'subscription_menu_message')}

${statusText}
${cityText}
${timeText}
        `.trim();

        const keyboard = await this.getSubscriptionKeyboard(chatId, subscription?.status);
        bot.sendMessage(chatId, subscriptionMenuMessage, keyboard);
    });
},

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ ('active' –∏–ª–∏ 'inactive')
 * @returns {Object} - –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
 */
async getSubscriptionKeyboard(chatId, status) {
    const changeCityButton = await localization.getLocaleText(chatId, 'change_city_button');
    const changeTimeButton = await localization.getLocaleText(chatId, 'change_time_button');
    const unsubscribeButton = await localization.getLocaleText(chatId, 'unsubscribe_button');
    const subscribeButton = await localization.getLocaleText(chatId, 'subscribe_button');
    const backToMenuButton = await localization.getLocaleText(chatId, 'back_to_main_menu_button');

    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: changeCityButton, callback_data: 'change_city' }],
                [{ text: changeTimeButton, callback_data: 'change_time' }],
                status === 'active'
                    ? [{ text: unsubscribeButton, callback_data: 'unsubscribe' }]
                    : [{ text: subscribeButton, callback_data: 'subscribe' }],
                      [{ text: backToMenuButton, callback_data: 'back_to_main_menu' }]
            ]
        }
    };
},


    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
     * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
     * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async handleCitySelection(bot, chatId) {
        cityHandler.requestCity(bot, chatId);
    },



     /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
     * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
     * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
     async sendActionsMenu(bot, chatId) {
        const keyboard = await this.getActionsMenuKeyboard(chatId);
        this.sendMenu(bot, chatId, keyboard, 'actions_menu_message');
    },

    /**
     * –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
     * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object} - Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     */
    async getActionsMenuKeyboard(chatId) {
        const currentWeatherButton = await localization.getLocaleText(chatId, 'current_weather_button');
        const statsButton = await localization.getLocaleText(chatId, 'stats_button');
        const feedbackButton = await localization.getLocaleText(chatId, 'feedback_button');
        const backButton = await localization.getLocaleText(chatId, 'back_to_main_menu_button');

        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: currentWeatherButton, callback_data: 'current_weather' }],
                    [{ text: statsButton, callback_data: 'stats' }],
                    [{ text: feedbackButton, callback_data: 'feedback' }],
                    [{ text: backButton, callback_data: 'back_to_main_menu' }]
                ]
            }
        };
    },

    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
     * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async handleStats(bot, chatId) {
        const statsMessage = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: 120
- –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: 15
- –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫
        `.trim();

        bot.sendMessage(chatId, statsMessage);
    },

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
     * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
     * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async handleFeedback(bot, chatId) {
        const feedbackPrompt = await localization.getLocaleText(chatId, 'feedback_prompt');
        bot.sendMessage(chatId, feedbackPrompt, { reply_markup: { force_reply: true } });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.on('message', async (msg) => {
            if (msg.reply_to_message && msg.reply_to_message.text === (await localization.getLocaleText(chatId, 'feedback_prompt'))) {
                const feedback = msg.text;

                if (!feedback.trim()) {
                    const invalidFeedbackError = await localization.getLocaleText(chatId, 'invalid_feedback_error');
                    bot.sendMessage(chatId, invalidFeedbackError);
                    return;
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                console.log(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}: ${feedback}`);

                const feedbackSuccess = await localization.getLocaleText(chatId, 'feedback_success');
                bot.sendMessage(chatId, feedbackSuccess);
            }
        });
    },

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é
     * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
     * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} keyboard - Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     * @param {string} messageKey - –ö–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    async sendMenu(bot, chatId, keyboard, messageKey) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (lastMenuMessageId[chatId]) {
            try {
                await bot.deleteMessage(chatId, lastMenuMessageId[chatId]);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${lastMenuMessageId[chatId]}:`, error.message);
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const sentMessage = await bot.sendMessage(
            chatId,
            await localization.getLocaleText(chatId, messageKey),
            keyboard
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        lastMenuMessageId[chatId] = sentMessage.message_id;
    }
};